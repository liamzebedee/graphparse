DESIGN SIMPLIFICATION
=====================

DEFINE
quickly exploring/understanding codebase relationships

EMPATHISE
want to be able to visualise main types

PROTOTYPE


TEST
can see links, but too many

ITERATE




THE RECURSIVE ESSENCE
=====================

ast -> graph -> filtered(view) -> render

weight node based on relationships into it (even if we don't display them #leavethemalone)

so for example:

Package
    File?
        Imports
        Struct
            Field
            Method
        Func

we can filter to:

Package
    Structs
Imports

Also don't include the root package, otherwise it gets quite highly ranked in the pagerank (which is duh, since it's the thing that we're examining lol)




Refactor 1:

What is common here?

get/create the unique nodeid from:
    ast.Ident -> types.Object -> pointerid
    canonical string -> pointerid (packages, file nodes, )
create or get the node
    give it a label
    say what 'variety' it is
add edge between this node and another node
